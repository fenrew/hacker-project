{
  "_from": "multer-storage-cloudinary",
  "_id": "multer-storage-cloudinary@2.2.1",
  "_inBundle": false,
  "_integrity": "sha1-0x8luPCVID8xyeVUwBrYxpGxqXQ=",
  "_location": "/multer-storage-cloudinary",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "multer-storage-cloudinary",
    "fetchSpec": "latest",
    "name": "multer-storage-cloudinary",
    "raw": "multer-storage-cloudinary",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/multer-storage-cloudinary/-/multer-storage-cloudinary-2.2.1.tgz",
  "_shasum": "d31f25b8f095203f31c9e554c01ad8c691b1a974",
  "_spec": "multer-storage-cloudinary",
  "_where": "/Users/tormodflesjo/tormodWork/hacker-project",
  "author": {
    "name": "Affan Shahid"
  },
  "babel": {
    "presets": [
      "es2015"
    ]
  },
  "bugs": {
    "url": "https://github.com/affanshahid/multer-storage-cloudinary/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "run-parallel": "^1.1.6"
  },
  "deprecated": false,
  "description": "A Cloudinary multer storage engine",
  "devDependencies": {
    "babel-core": "^6.9.1",
    "babel-preset-es2015": "^6.9.0",
    "chai": "^3.5.0",
    "cloudinary": "^1.4.1",
    "eslint": "^2.13.0",
    "form-data": "^1.0.0-rc4",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-mocha": "^2.2.0",
    "mocha": "^2.5.3",
    "multer": "^1.1.0",
    "superagent": "^2.0.0"
  },
  "homepage": "https://github.com/affanshahid/multer-storage-cloudinary#readme",
  "keywords": [
    "cloudinary",
    "engine",
    "multer",
    "storage",
    "upload"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "multer-storage-cloudinary",
  "optionalDependencies": {},
  "readme": "# Multer Storage Cloudinary\r\nA multer storage engine for Cloudinary. Also consult the [Cloudinary API](https://github.com/cloudinary/cloudinary_npm).\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install --save multer-storage-cloudinary\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar cloudinary = require('cloudinary');\r\nvar cloudinaryStorage = require('multer-storage-cloudinary');\r\nvar express = require('express');\r\nvar multer = require('multer');\r\n\r\nvar app = express();\r\n\r\nvar storage = cloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  folder: 'folder-name',\r\n  allowedFormats: ['jpg', 'png'],\r\n  filename: function (req, file, cb) {\r\n    cb(undefined, 'my-file-name');\r\n  }\r\n});\r\n\r\nvar parser = multer({ storage: storage });\r\n\r\napp.post('/upload', parser.array('images', 10), function (req, res) {\r\n  console.log(req.files);\r\n});\r\n```\r\n\r\n### File properties\r\n\r\nFile objects will expose (at least) the following properties provided by the [Cloudinary API](https://github.com/cloudinary/cloudinary_npm#upload):\r\n\r\nKey | Description\r\n--- | ---\r\n`public_id` | Name of the file\r\n`format` | Extension of the stored file\r\n`url` | A URL for fetching the file\r\n`secure_url` | A secure URL for fetching the file\r\n`resource_type` | The type of the file\r\n`bytes` | Size of the file\r\n*NOTE: Many properties depend on the file type, to find out about the other exposed properties please check the Cloudinary API reference.*\r\n\r\n### Options\r\n\r\nUpload parameters can be configured using the options object passed to the `multer-storage-cloudinary` function call.\r\n\r\n```javascript\r\nvar cloudinaryStorage = require('multer-storage-cloudinary');\r\n\r\nvar storage = cloudinaryStorage({\r\n  // configuration options\r\n});\r\n```\r\n\r\nAll parameters are optional except the configured Cloudinary API object:\r\n\r\nParameter | Description | Type\r\n--- | --- | ---\r\n`options.cloudinary` | A Cloudinary API object <br>The API must be configured by the user | `object` <br>**required**\r\n`options.filename` | The name of the file to be uploaded | `function`\r\n`options.folder` | The name of the Cloudinary folder to upload into | `string` or `function`\r\n`options.transformation` | Transformations to be applied - [Cloudinary API](https://github.com/cloudinary/cloudinary_npm#additional-resources) | `array` or `function`\r\n`options.type` | Storage mode | `string` or `function`\r\n`options.format` | The format to convert the file into | `string` or `function`\r\n`options.allowedFormats` | A formats filter | `array` or `function`\r\n`options.params` | An overriding object to directly supply all parameters | `object` or `function`\r\n*NOTE: For further guidance on all parameters: consult the Cloudinary documentation.*\r\n\r\nFunctional parameters are called on every request and can be used in the following way:\r\n\r\n```javascript\r\nvar cloudinary = require('cloudinary');\r\nvar cloudinaryStorage = require('multer-storage-cloudinary');\r\n\r\nvar storage = cloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  folder: function(request, file, callback) {\r\n    callback(undefined, 'my-value');\r\n  }\r\n});\r\n```\r\n#### options.params\r\nAll Cloudinary upload parameters can be configured altogether using this. If a non-null value is provided(either directly or through the callback) all other options will be overriden.\r\n\r\nExample:\r\n```javascript\r\nvar cloudinary = require('cloudinary');\r\nvar cloudinaryStorage = require('multer-storage-cloudinary');\r\n\r\nvar storage = cloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  folder: 'folder', // will not be used\r\n  format: 'jpg', // will not be used\r\n  params: {\r\n    folder: 'foo',\r\n    format: 'png'\r\n  }\r\n});\r\n\r\nvar anotherStorage = cloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  folder: 'folder',\r\n  format: 'jpg',\r\n  params: function(req, file, cb) {\r\n    var foo = undefined;\r\n    cb(undefined, foo); // other options will not be overriden\r\n                        // as long as foo is null\r\n  }\r\n});\r\n```\r\n\r\n## Testing\r\n\r\nThe Cloudinary API must be configured using the `CLOUDINARY_URL` environment variable in order to run the tests.\r\nAll test files are stored in a seperate Cloudinary folder, which is deleted after tests finish.\r\n\r\n```sh\r\nnpm test\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/affanshahid/multer-storage-cloudinary.git"
  },
  "scripts": {
    "build": "gulp build",
    "prepublish": "npm run build",
    "test": "gulp test"
  },
  "version": "2.2.1"
}
